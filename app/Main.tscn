[gd_scene load_steps=4 format=2]

[sub_resource type="SpatialMaterial" id=8]
flags_unshaded = true
vertex_color_use_as_albedo = true

[sub_resource type="PlaneMesh" id=6]
material = SubResource( 8 )
size = Vector2( 16, 9 )
subdivide_width = 152
subdivide_depth = 86

[sub_resource type="GDScript" id=7]
script/source = "extends MeshInstance

const DEBUG = false

# Use SimplexNoise if debug enabled, else use GDRealsense
var realsense = OpenSimplexNoise.new() if (DEBUG) else load(\"res://bin/x11/gdrealsense.gdns\").new()

var st = SurfaceTool.new()
var img = Image.new()
var mdt = MeshDataTool.new()
var top_offset = 75
var right_offset = 50
var bottom_offset = 40
var left_offset = 120
var segment_size = 3
var sea_level = 0.02
var material
var rng = RandomNumberGenerator.new()


func get_frame():
	var width : float
	var height: float
	var depth_array: PoolByteArray
	if DEBUG:
		realsense.seed = randi()
		width = ceil((1280 - right_offset - left_offset)/segment_size) + 1
		height = ceil((600 - top_offset - bottom_offset)/segment_size) + 1
		depth_array = realsense.get_image(width, height).get_data()
	else:
		depth_array = realsense.get_depth_frame(top_offset, right_offset, bottom_offset, left_offset,segment_size)
		width = realsense.get_frame_width()
		height = realsense.get_frame_height()
		
	return {\"width\": width, \"height\": height, \"depth_array\": depth_array}

# Called when the node enters the scene tree for the first time.
func _ready():
	material = mesh.material
	rng.randomize()
	
	var frame = get_frame()

	img.create_from_data(frame.width, frame.height, false, Image.FORMAT_R8, frame.depth_array)
	img.lock()

	st.clear()

	st.begin(Mesh.PRIMITIVE_TRIANGLES)

	var vert_x_width = frame.width - 1
	var vert_y_height = frame.height - 1
	for y in range(frame.height):
		for x in range(frame.width):
			st.add_smooth_group(true)
			st.add_vertex(Vector3(((8.0*x)/(frame.width)), 0.0, ((4.5 * y)/(frame.height))))
			# Build indices for a complete mesh
			var vert_y = y
			var vert_x = x
			var next_vert_y = vert_y + 1
			var next_vert_x = vert_x + 1
			if(vert_y < vert_y_height and vert_x < vert_x_width):
				st.add_index((vert_x_width * vert_y) + vert_x)
				st.add_index((vert_x_width * vert_y) + next_vert_x)
				st.add_index((vert_x_width * next_vert_y) + next_vert_x)
				
				st.add_index((vert_x_width * vert_y) + vert_x)
				st.add_index((vert_x_width * next_vert_y) + next_vert_x)
				st.add_index((vert_x_width * next_vert_y) + vert_x)

	st.set_material(material)
	# Commit to a mesh.
	mesh = st.commit()
	mdt.create_from_surface(mesh, 0)
	img.unlock()
	
func set_color_terrain(mesh_height):
	var color: Color
	var rand = (rng.randf() - 0.5) * 0.2
	
	if mesh_height <= sea_level: 
		color = Color(\"#5bc0eb\") # Water
	elif mesh_height > sea_level and mesh_height <= (sea_level + 0.05):
		color = Color(\"#ead2ac\") # Sand
	elif mesh_height > (sea_level + 0.05) and mesh_height <= (sea_level + 0.3): 
		color = Color(\"#7f9e31\") # Grass
	elif mesh_height > (sea_level + 0.3) and mesh_height <= (sea_level + 0.6):
		color = Color(\"#ba3d3d\") # Lava?
	else:
		color = Color(\"#eff1f3\") # Snow?
	
	# Randomize color
	color.r = color.r + rand
	color.g = color.g + rand
	color.b = color.b + rand
	return color
	
func set_color_rainbow(mesh_height):
	var color: Color
	var rand = (rng.randf() - 0.5) * 0.2
	
	if mesh_height <= sea_level: 
		color = Color(\"#BA1B1D\") # Red
	elif mesh_height > sea_level and mesh_height <= (sea_level + 0.15):
		color = Color(\"#FF9B71\") # Orange
	elif mesh_height > (sea_level + 0.15) and mesh_height <= (sea_level + 0.3): 
		color = Color(\"#F7D002\") # Yellow
	elif mesh_height > (sea_level + 0.3) and mesh_height <= (sea_level + 0.45):
		color = Color(\"#018E42\") # Green
	elif mesh_height > (sea_level + 0.45) and mesh_height <= (sea_level + 0.6):
		color = Color(\"#454E9E\") # Blue
	else:
		color = Color(\"#662E9B\") # Violet
	
	# Randomize color
	color.r = color.r + rand
	color.g = color.g + rand
	color.b = color.b + rand
	return color
	
func _process(_delta):	
	var frame = get_frame()
	
	if Input.is_action_pressed(\"toggle_fullscreen\"):
		OS.window_fullscreen = !OS.window_fullscreen

	img.create_from_data(frame.width, frame.height, false, Image.FORMAT_R8, frame.depth_array)
	img.lock()

	for i in range(mdt.get_vertex_count()):
		var vert=mdt.get_vertex(i)
		var x = (vert.x  * frame.width)/8.0
		var y = (vert.z * frame.height)/4.5
		var mesh_height = 1.0 - img.get_pixel(x, y).r

		if typeof(mdt.get_vertex_meta(i)) == TYPE_REAL:
			if (mesh_height <= sea_level and Engine.get_idle_frames() % 20 == 0): # Update water colors every 20 frames
				mdt.set_vertex_color(i, set_color_rainbow(mesh_height))
			elif abs(mdt.get_vertex_meta(i) - mesh_height) > 0.05: # Only update terrain colors when signficant change since last frame
				mdt.set_vertex_color(i, set_color_rainbow(mesh_height))
		else:
			mdt.set_vertex_color(i, set_color_rainbow(mesh_height))
		
		mdt.set_vertex_meta(i, mesh_height)

	mesh.surface_remove(0)
	mdt.commit_to_surface(mesh)

	img.unlock()
"

[node name="Main" type="Spatial"]

[node name="Terrain" type="MeshInstance" parent="."]
mesh = SubResource( 6 )
material/0 = null
script = SubResource( 7 )

[node name="Avatar" type="Spatial" parent="."]

[node name="Camera" type="Camera" parent="Avatar"]
transform = Transform( 1, 1.74846e-07, -3.82137e-15, -3.82137e-15, 4.37114e-08, 1, 1.74846e-07, -1, 4.37114e-08, 4, 2.9, 2.3 )
