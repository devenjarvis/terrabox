[gd_scene load_steps=4 format=2]

[sub_resource type="SpatialMaterial" id=8]
flags_unshaded = true
vertex_color_use_as_albedo = true

[sub_resource type="PlaneMesh" id=6]
material = SubResource( 8 )
size = Vector2( 16, 9 )
subdivide_width = 152
subdivide_depth = 86

[sub_resource type="GDScript" id=7]
script/source = "extends MeshInstance
#
##Load realsense
var realsense = preload(\"res://bin/x11/gdrealsense.gdns\").new()
#
var st = SurfaceTool.new()
var img = Image.new()
var mdt = MeshDataTool.new()
var t_off = 55
var r_off = 20
var b_off = 26
var l_off = 55
var segment_size = 3
var sea_level = 0.1
var material
var rng = RandomNumberGenerator.new()
#
## Called when the node enters the scene tree for the first time.
func _ready():
	material = mesh.material
	rng.randomize()
	
	var depth_array = realsense.get_depth_frame(t_off, r_off, b_off, l_off,segment_size)
	var width = realsense.get_frame_width()
	var height = realsense.get_frame_height()

	img.create_from_data(width, height, false, Image.FORMAT_R8, depth_array)
	img.lock()

	st.clear()

	st.begin(Mesh.PRIMITIVE_TRIANGLES)

	var vert_x_width = width - 1
	var vert_y_height = height - 1
	for y in range(height):
		for x in range(width):
			st.add_smooth_group(true)
			st.add_vertex(Vector3(((8.0*x)/(width)), 0.0, ((4.5 * y)/(height))))
			# Build indices for a complete mesh
			var vert_y = y
			var vert_x = x
			var next_vert_y = vert_y + 1
			var next_vert_x = vert_x + 1
			if(vert_y < vert_y_height and vert_x < vert_x_width):
				st.add_index((vert_x_width * vert_y) + vert_x)
				st.add_index((vert_x_width * vert_y) + next_vert_x)
				st.add_index((vert_x_width * next_vert_y) + next_vert_x)
				
				st.add_index((vert_x_width * vert_y) + vert_x)
				st.add_index((vert_x_width * next_vert_y) + next_vert_x)
				st.add_index((vert_x_width * next_vert_y) + vert_x)

	# st.index()
	#st.generate_normals()
	#st.generate_tangents()
	st.set_material(material)
	# Commit to a mesh.
	mesh = st.commit()
	mdt.create_from_surface(mesh, 0)
	img.unlock()
	
func set_color(mesh_height):
	#print(mesh_height)
	var color = Color(1.0, 0.0, 0.0)
	var rand = (rng.randf() - 0.5) * 0.2
	
	if mesh_height <= sea_level: # Water
		color = Color(0.35686 + rand, 0.75294 + rand, 0.92156 + rand)
	elif mesh_height > sea_level and mesh_height <= (sea_level + 0.1): # Sand
		color = Color(0.91765 + rand, 0.82353 + rand, 0.67451 + rand)
	elif mesh_height > (sea_level + 0.1) and mesh_height <= (sea_level + 0.3): # Grass
		color = Color(0.49804 + rand, 0.61961 + rand, 0.19216 + rand)
	elif mesh_height > (sea_level + 0.3): # Rock
		color = Color(0.20784 + rand, 0.20784 + rand, 0.15294 + rand)
	
	return color
	
func _process(_delta):
	var depth_array = realsense.get_depth_frame(t_off, r_off, b_off, l_off, segment_size)
	var width = realsense.get_frame_width()
	var height = realsense.get_frame_height()

	img.create_from_data(width, height, false, Image.FORMAT_R8, depth_array)
	img.lock()

	for i in range(mdt.get_vertex_count()):
		var vert=mdt.get_vertex(i)
		var x = (vert.x  * width)/8.0
		var y = (vert.z * height)/4.5
		x = x + ((x - (width/2.0))/(width/2.0)*4)
		y = y + ((y - (height/2.0))/(height/2.0)*2.0)
		var mesh_height = 1.0 - img.get_pixel(x, y).r

		if typeof(mdt.get_vertex_meta(i)) == TYPE_REAL:
			if (mesh_height <= sea_level and Engine.get_idle_frames() % 20 == 0): # Update water colors every 20 frames
				mdt.set_vertex_color(i, set_color(mesh_height))
			elif abs(mdt.get_vertex_meta(i) - mesh_height) > 0.05: # Only update terrain colors when signficant change since last frame
				mdt.set_vertex_color(i, set_color(mesh_height))
		else:
			mdt.set_vertex_color(i, set_color(mesh_height))
		
		mdt.set_vertex_meta(i, mesh_height)

	mesh.surface_remove(0)
	mdt.commit_to_surface(mesh)

	img.unlock()
"

[node name="Main" type="Spatial"]

[node name="Terrain" type="MeshInstance" parent="."]
mesh = SubResource( 6 )
material/0 = null
script = SubResource( 7 )

[node name="Avatar" type="Spatial" parent="."]

[node name="Camera" type="Camera" parent="Avatar"]
transform = Transform( 1, 1.74846e-07, -3.82137e-15, -3.82137e-15, 4.37114e-08, 1, 1.74846e-07, -1, 4.37114e-08, 4, 2.9, 2.3 )
